use anyhow::Result;
use clap::Parser;
use githem_core::{IngestOptions, Ingester, checkout_branch, is_remote_url};
use std::fs;
use std::io;
use std::path::PathBuf;

#[derive(Parser)]
#[command(name = "githem")]
#[command(about = "Transform git repositories into LLM-ready text", long_about = None)]
#[command(version, author = "Rotko Networks <hq@rotko.net>")]
struct Cli {
    /// Repository source (local path or git URL, defaults to current directory)
    #[arg(default_value = ".")]
    source: String,

    /// Output file (default: stdout)
    #[arg(short, long)]
    output: Option<PathBuf>,

    /// Include only files matching pattern (can be specified multiple times)
    #[arg(short, long)]
    include: Vec<String>,

    /// Exclude files matching pattern (in addition to .gitignore)
    #[arg(short, long)]
    exclude: Vec<String>,

    /// Maximum file size in bytes (default: 1MB)
    #[arg(short = 's', long, default_value = "1048576")]
    max_size: usize,

    /// Branch to checkout (remote repos only)
    #[arg(short, long)]
    branch: Option<String>,

    /// Include untracked files
    #[arg(short = 'u', long)]
    untracked: bool,

    /// Quiet mode (no header output)
    #[arg(short = 'q', long)]
    quiet: bool,
}

fn main() -> Result<()> {
    let cli = Cli::parse();

    let options = IngestOptions {
        include_patterns: cli.include,
        exclude_patterns: cli.exclude,
        max_file_size: cli.max_size,
        include_untracked: cli.untracked,
        branch: cli.branch.clone(),
    };

    let ingester = if is_remote_url(&cli.source) {
        Ingester::from_url(&cli.source, options)?
    } else {
        let path = PathBuf::from(&cli.source);
        if !path.join(".git").exists() {
            eprintln!("Error: Not a git repository (or any parent up to mount point /)");
            eprintln!("Use 'git init' to create a repository or specify a remote URL");
            std::process::exit(1);
        }

        let ingester = Ingester::from_path(&path, options)?;

        // Handle local branch checkout
        if let Some(branch) = &cli.branch {
            let repo = git2::Repository::open(&path)?;
            checkout_branch(&repo, branch)?;
        }

        ingester
    };

    // Setup output
    let mut output: Box<dyn io::Write> = match cli.output {
        Some(path) => Box::new(fs::File::create(path)?),
        None => Box::new(io::stdout()),
    };

    // Write header unless quiet mode
    if !cli.quiet {
        writeln!(output, "# Repository: {}", cli.source)?;
        writeln!(output, "# Generated by githem-cli (rotko.net)\n")?;
    }

    // Ingest files
    ingester.ingest(&mut output)?;

    Ok(())
}
