name: Build and Publish Githem
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-cli:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: githem-linux-x64
          # - os: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu
          #   name: githem-linux-arm64
          # - os: macos-latest
          #   target: x86_64-apple-darwin
          #   name: githem-macos-x64
          # - os: macos-latest
          #   target: aarch64-apple-darwin
          #   name: githem-macos-arm64
          # - os: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   name: githem-windows-x64.exe
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            curl -L https://github.com/cross-rs/cross/releases/latest/download/cross-x86_64-unknown-linux-gnu.tar.gz | tar xz
            sudo mv cross /usr/local/bin/
          fi
      
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install pkg-config
      
      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: echo "No additional dependencies needed"
      
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build CLI binary
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ] && [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            cross build --release --bin githem --target ${{ matrix.target }}
          else
            cargo build --release --bin githem --target ${{ matrix.target }}
          fi
      
      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/githem ${{ matrix.name }}
          chmod +x ${{ matrix.name }}
      
      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: cp target/${{ matrix.target }}/release/githem.exe ${{ matrix.name }}
      
      - name: Generate SHA512 hash
        run: |
          if [ "${{ runner.os }}" = "macOS" ]; then
            shasum -a 512 ${{ matrix.name }} > ${{ matrix.name }}.sha512
          else
            sha512sum ${{ matrix.name }} > ${{ matrix.name }}.sha512
          fi
        shell: bash
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: |
            ${{ matrix.name }}
            ${{ matrix.name }}.sha512

  build-server:
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            name: githem-api-linux-x64
          # - target: aarch64-unknown-linux-gnu
          #   name: githem-api-linux-arm64
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            curl -L https://github.com/cross-rs/cross/releases/latest/download/cross-x86_64-unknown-linux-gnu.tar.gz | tar xz
            sudo mv cross /usr/local/bin/
          fi
      
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-server-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build API binary
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            cross build --release --bin githem-api --target ${{ matrix.target }}
          else
            cargo build --release --bin githem-api --target ${{ matrix.target }}
          fi
      
      - name: Prepare binary
        run: |
          cp target/${{ matrix.target }}/release/githem-api ${{ matrix.name }}
          chmod +x ${{ matrix.name }}
      
      - name: Generate SHA512 hash
        run: sha512sum ${{ matrix.name }} > ${{ matrix.name }}.sha512
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: |
            ${{ matrix.name }}
            ${{ matrix.name }}.sha512

  sign-and-release:
  needs: [build-cli, build-server]
  runs-on: ubuntu-latest
  permissions:
    contents: write
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: '0'

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true

    - name: Import GPG Key
      run: echo "${{ secrets.HQ_ROTKO_GPG }}" | gpg --batch --import

    - name: Configure GPG
      run: |
        echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
        gpg-connect-agent reloadagent /bye

    - name: Sign all binaries and hashes
      run: |
        for binary in githem-*; do
        if [[ ! "$binary" =~ \.(sha512|sig)$ ]]; then
        gpg --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
        --detach-sign --armor --default-key hq@rotko.net --output "${binary}.sig" "$binary"

        if [[ -f "${binary}.sha512" ]]; then
        gpg --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
        --detach-sign --armor --default-key hq@rotko.net --output "${binary}.sha512.sig" "${binary}.sha512"
        fi
        fi
        done
      env:
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

    - name: Create Release
      run: |
        gh release create ${{ github.ref_name }} \
        --title "Githem ${{ github.ref_name }}" \
        --generate-notes \
        githem-* \
        *.sig
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
