name: Build and Publish Githem
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-cli:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: githem-linux-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: githem-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: githem-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: githem-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: githem-windows-x64.exe
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross-compilation dependencies (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
      
      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build CLI binary
        run: |
          cargo build --release --bin githem --target ${{ matrix.target }}
      
      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/githem ${{ matrix.name }}
          chmod +x ${{ matrix.name }}
      
      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/githem.exe ${{ matrix.name }}
      
      - name: Generate SHA512 hash
        run: |
          sha512sum ${{ matrix.name }} > ${{ matrix.name }}.sha512
        shell: bash
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: |
            ${{ matrix.name }}
            ${{ matrix.name }}.sha512

  build-server:
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            name: githem-api-linux-x64
          - target: aarch64-unknown-linux-gnu
            name: githem-api-linux-arm64
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross-compilation dependencies
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu pkg-config
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
      
      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-server-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build API binary
        run: |
          cargo build --release --bin githem-api --target ${{ matrix.target }}
      
      - name: Prepare binary
        run: |
          cp target/${{ matrix.target }}/release/githem-api ${{ matrix.name }}
          chmod +x ${{ matrix.name }}
      
      - name: Generate SHA512 hash
        run: |
          sha512sum ${{ matrix.name }} > ${{ matrix.name }}.sha512
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: |
            ${{ matrix.name }}
            ${{ matrix.name }}.sha512

  sign-and-release:
    needs: [build-cli, build-server]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      
      - name: Import GPG Key
        run: |
          echo "${{ secrets.HQ_ROTKO_PGP }}" | gpg --batch --import
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      
      - name: Configure GPG
        run: |
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          gpg-connect-agent reloadagent /bye
      
      - name: Sign all binaries and hashes
        run: |
          for binary in githem-*; do
            if [[ ! "$binary" =~ \.(sha512|sig)$ ]]; then
              echo "Signing $binary"
              gpg --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
                --detach-sign --armor --default-key hq@rotko.net --output "${binary}.sig" "$binary"
              
              if [[ -f "${binary}.sha512" ]]; then
                echo "Signing ${binary}.sha512"
                gpg --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
                  --detach-sign --armor --default-key hq@rotko.net --output "${binary}.sha512.sig" "${binary}.sha512"
              fi
            fi
          done
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      
      - name: Create Release
        run: |
          gh release create ${{ github.ref_name }} \
            --title "Githem ${{ github.ref_name }}" \
            --generate-notes \
            githem-* \
            *.sig
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
